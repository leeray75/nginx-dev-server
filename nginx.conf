events {
    # Default event loop configuration
}

http {
    log_format custom_log '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$full_path" ';

    
    #### QA01 ####

    # Image / Static Content Server
    server {
        listen 8080 ssl;
        server_name img.localhost.qa.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        
         # Define MIME types for JS, CSS, and image files
        types {
            text/javascript js;
            text/css css;
            image/jpeg jpg jpeg;
            image/png png;
            image/gif gif;
            image/svg+xml svg svgz;
        }

        location ~ ^/example-promo/(?<project>[^/]+)/(?<subpath>.+)/(?<version>[^/]+)/(?<file>.+)$ {
            set $full_path /usr/share/projects/promo/$project/dist/$subpath/$version;
            alias $full_path;
            access_log /var/log/nginx/access.log custom_log;
            try_files /$file =404;
        }
    }

    # API Server
    server {
        listen 8080 ssl;
        server_name api.localhost.qa.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location / {
            proxy_pass https://api.qa.example.com;
            proxy_pass_request_headers on;

            proxy_redirect off; 
            proxy_ssl_server_name on;
            proxy_ssl_verify off;
            # Intercept HTTP errors, including redirects
            proxy_intercept_errors on;

 
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Cookie, Authorization, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';
            if ($request_method = 'OPTIONS') {
                add_header          'Access-Control-Allow-Origin' '$http_origin' always;
                add_header          'Access-Control-Allow-Credentials' 'true' always;
                add_header          'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header          'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,access_token,__setXHR_,x-user-token' always;
                add_header          'Access-Control-Max-Age' 1728000;
                add_header          'Content-Type' 'text/plain charset=UTF-8';
                add_header          'Content-Length' 0;
                return              204;
            }
            # Forward the X-User-Token header from the client's request
            #proxy_set_header X-User-Token $http_x_user_token;

            # Proxy headers
            proxy_set_header Host "api.qa.example.com";
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Referer "https://www.qa.example.com";
            proxy_set_header Origin "https://www.qa.example.com";
            
            proxy_set_header Accept $http_accept;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Content-Type $http_content_type;
     
            # Remove or overwrite the 'Access-Control-Allow-Origin' header from the backend response
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Methods';


        }
    }
    
    # App Server
    server {
        listen 8080 ssl;
        server_name www.localhost.qa.example.com localhost.qa.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location / {
            default_type text/html;
            proxy_pass https://www.qa.example.com;

            # Preserve the original Host header in the request
            proxy_set_header Host www.qa.example.com;

            # Enable SSL server name in the proxy request
            proxy_ssl_server_name on;

            # Disable SSL verification for the backend server
            proxy_ssl_verify off;

            # Intercept HTTP errors, including redirects
            proxy_intercept_errors on;

            # Custom error handler for intercepting 301 redirects
            error_page 301 302 = @handle_redirect;

            # Forward only specific headers
            proxy_pass_request_headers on;
            proxy_set_header Accept $http_accept;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header Accept-Encoding "";

            # Remove other headers
            proxy_hide_header Authorization;
            proxy_hide_header User-Agent;
            proxy_hide_header Referer;

            # Additional proxy settings as needed
            access_log /var/log/nginx/access.log custom_log;

            # Enable response body substitution
            sub_filter 'img.qa.examplestatic.com/example-promo' 'img.localhost.qa.example.com:8080/example-promo';
            sub_filter_once off;
            sub_filter_last_modified on;
        }

        # Custom error handler location for handling redirects
        location @handle_redirect {
             # Capture the original URI from the backend's response
            set $redirect_uri $sent_http_location;

            # Log the value of $redirect_uri
            error_log /var/log/nginx/redirect_uri.log notice; 

            # Respond with a custom redirect to maintain the client's host name and port number
            return 301 $scheme://$host:$server_port/some-path;
        }
    }

    #### STAGING ####

    # Image / Static Content Server
    server {
        listen 8080 ssl;
        server_name img.localhost.staging.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # Define MIME types for JS, CSS, and image files
        types {
            text/javascript js;
            text/css css;
            image/jpeg jpg jpeg;
            image/png png;
            image/gif gif;
            image/svg+xml svg svgz;
        }

        location ~ ^/example-promo/(?<project>[^/]+)/(?<subpath>.+)/(?<version>[^/]+)/(?<file>.+)$ {
            set $full_path /usr/share/projects/promo/$project/dist/$subpath/$version;
            alias $full_path;
            access_log /var/log/nginx/access.log custom_log;
            try_files /$file =404;
        }
    }

    # API Server
    server {
        listen 8080 ssl;
        server_name api.localhost.staging.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location / {
            proxy_pass https://api.staging.example.com;

            proxy_redirect off; 
            proxy_ssl_server_name on;
            proxy_ssl_verify off;
            # Intercept HTTP errors, including redirects
            proxy_intercept_errors on;

            # Consolidate CORS headers into a single add_header directive
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Cookie, Authorization, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';
            if ($request_method = 'OPTIONS') {
                add_header          'Access-Control-Allow-Origin' '$http_origin' always;
                add_header          'Access-Control-Allow-Credentials' 'true' always;
                add_header          'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header          'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,access_token,__setXHR_,x-user-token' always;
                add_header          'Access-Control-Max-Age' 1728000;
                add_header          'Content-Type' 'text/plain charset=UTF-8';
                add_header          'Content-Length' 0;
                return              204;
            }
            # Forward the X-User-Token header from the client's request
            #proxy_set_header X-User-Token $http_x_user_token;

            # Proxy headers
            proxy_set_header Host "api.staging.example.com";
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Referer "https://www.staging.example.com";
            proxy_set_header Origin "https://www.staging.example.com";
            # Hide all headers except Accept, Cookie, and Content-Type
            proxy_pass_request_headers on;
            #proxy_hide_header all;
            proxy_set_header Accept $http_accept;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Content-Type $http_content_type;
            #proxy_hide_header Referer;
             # Remove or overwrite the 'Access-Control-Allow-Origin' header from the backend response
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Methods';

            #access_log /var/log/nginx/access.log custom_log;

        }
    }
    
    # App Server
    server {
        listen 8080 ssl;
        server_name www.localhost.staging.example.com localhost.staging.example.com;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        location / {
            default_type text/html;
            proxy_pass https://www.staging.example.com;

            # Preserve the original Host header in the request
            proxy_set_header Host www.staging.example.com;

            # Enable SSL server name in the proxy request
            proxy_ssl_server_name on;

            # Disable SSL verification for the backend server
            proxy_ssl_verify off;

            # Intercept HTTP errors, including redirects
            proxy_intercept_errors on;

            # Custom error handler for intercepting 301 redirects
            error_page 301 302 = @handle_redirect;

            # Forward only specific headers
            proxy_pass_request_headers on;
            proxy_set_header Accept $http_accept;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header Accept-Encoding "";

            # Remove other headers
            proxy_hide_header Authorization;
            proxy_hide_header User-Agent;
            proxy_hide_header Referer;

            # Additional proxy settings as needed
            access_log /var/log/nginx/access.log custom_log;

            # Enable response body substitution
            sub_filter 'img.staging.examplestatic.com/example-promo' 'img.localhost.staging.example.com:8080/example-promo';
            sub_filter_once off;
            sub_filter_last_modified on;
        }

        # Custom error handler location for handling redirects
        location @handle_redirect {
             # Capture the original URI from the backend's response
            set $redirect_uri $sent_http_location;

            # Log the value of $redirect_uri
            error_log /var/log/nginx/redirect_uri.log notice; 

            # Respond with a custom redirect to maintain the client's host name and port number
            return 301 $scheme://$host:$server_port/some-path;
        }
    }

}
